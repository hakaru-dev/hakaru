# Hakaru Standard Library
# Discrete Distributions: 
#	definitions for distributions with discrete outcomes
# author: Mahmoud Khattab

####################
# Discrete Uniform #
####################

# Natural Uniform Distribution
# Distribution ranges from n1 to n2 (inclusive) all with the same probability
def natUniform(n1 nat, n2 nat) measure(nat):
	if (n2 > n1):
		n = int2nat(n2-n1)
		arr = array x of n+1: 1.0
		X <~ categorical(arr)
		return X+n1
	else:
		n = int2nat(n1-n2)
		arr = array x of n+1: 1.0
		X <~ categorical(arr)
		return X+n2

# Integer Uniform Distribution
def intUniform(a int,b int) measure(int):
	if (b > a):
		X <~ natUniform(0,int2nat(b-a))
		return X+a
	else:
		X <~ natUniform(0,int2nat(a-b))
		return X+b

##################################################
# Gamma-Poisson Distribution and Transformations #
##################################################

# The Gamma-Poisson distribution is defined as a Poisson distribution with a 
# mean selected from a Gamma distribution defined by shape and scale parameters
def gammaPoisson(shape prob, scale prob) measure(nat):
	mu <~ gamma(shape, scale)
	X <~ poisson(mu)
	return X

# Pascal distribution AKA Negative Binomial distribution
# Given an Bernoulli distribution with probability p of success, returns
# the number of successes that occur before n failures occur.	
# Implemented as a case of the gammaPoisson distribution where
# the shape is defined as (1-p)/p and the scale is n
def pascal(n nat, p prob) measure(nat):
	# TODO: error check ensure p<=1
	shape = (1-p)/p
	X <~ gammaPoisson(real2prob(shape), nat2prob(n))
	return X

# Geometric Distribution: case of Pascal distribution with n=1
# i.e. measures number of successes with probability p that will occur
# before a failure occurs.
def geometric(p prob) measure(nat):
	X <~ pascal(1,p)
	return X

# Beta-Pascal Transformations is a case of the Pascal Distribution
# where p is pulled from a Beta Distribution with shape parameters
# a and b
def betaPascal(n nat, a prob, b prob) measure(nat):
	p <~ beta(a,b)
	X <~ pascal(n,p)
	return X

# The hypergeometric distribution is a discrete
# probaility distribution that describes the 
# probability of 'k' successes in 'n' draws (without
# replacement) from a population of size 'N' that has
# 'K' objects with the desired feature. 
def hyperGeo(N nat, K nat, n nat):
	# TODO: check that 0 <= K <= N and 0 <= n <= N and 
	# throw error if not satisfied

	# the range of values for the random variable fall 
	# in between some minimum and maximum. These min 
	# and max are defined in terms of the size of the 
	# parameters. 

	# minimum defined as max(n + K - N, 0)
	min = if n + K - N > 0: n + K - N else: 0

	# maximum defined as min(n, K)
	max = if n < K: n else: K
 
	# R represents the total number of possible values
	# that the random variable could take on. 
	R = max - min + 1

	# filling array with probabilities based on the 
	# probability mass function. Then, sample a 
	# categorical with these probailities. 
	p = array k of int2nat(R): choose(K, int2nat(k + min)) * choose(int2nat(N - K), int2nat(n - (k + min))) / choose(N, n)
	h <~ categorical(p)

	# map the probailities to the appropriate value
	# return p
	return (array i of int2nat(R): int2nat(i + min))[h]

	# --- This is a check to see if the probabilities sum to 1 ---
	# return summate i from 0 to size(p): p[i]



#discrete Weibull Distribution	
def discreteWeibull(p prob, beta prob) measure(int):
	x <~ counting
	weight( if (x<0): 0 else: (real2prob((real2prob(1-p) ** x) ** beta - (real2prob(1-p) ** (x+1)) ** beta)),return x)

# Polya Distribution
def polya(n nat, p prob, beta prob) measure(nat):
	# TODO: check that 0 < p < 1 and throw error if not satisfied
	# TODO: check that beta > 0 and throw error if not satisfied
	# TODO: confirm type of beta. it is unclear from the documentation 
	# 		I found whether it is supposed to be a prob or a nat. 

	# apply the pmf to the values 0..n and store them in an array 
	pmf = array x of n + 1: choose(n, x) * (product j from 0 to x: p + j * beta) * (product k from 0 to int2nat(n - x): real2prob(1 - p + k * beta)) / (product i from 0 to n: 1 + i * beta)

	# sample a categorical with probabilities based on the pmf
	p <~ categorical(pmf)

	return p
