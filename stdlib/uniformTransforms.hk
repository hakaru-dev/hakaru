# Hakaru Standard Library
# author: Mahmoud Khattab

# Uniform distribution transformations

######################
# Uniform Transforms #
######################

# Pareto Distribution.
def pareto(lambda prob, kappa prob):
	X <~ uniform(0,1)
	return lambda / (real2prob(X) ** (1/kappa))

# Standard power distribution
def standardPower(beta prob):
	X <~ uniform(0,1)
	return real2prob(X) ** (1/beta)

# Gompertz distribution
def gompertz(delta prob, kappa prob):
	# TODO: Make sure lambda > 0, kappa > 1
	X <~ uniform(0,1)
	return log(real2prob(1-log(real2prob(X))*log(kappa)/delta))/log(kappa)

# Log-Logistic Distribution
def log_logistic(lambda prob, kappa prob):
	X <~ uniform(0,1)
	return real2prob((1-X)/X) ** (1/kappa) / lambda


#Logistic Distribution
def logistic(lambda prob, kappa prob):
	X <~ log_logistic(lambda, kappa)
	return log(X)

# logistic exponential distribution
def logisticExponential(lambda prob, kappa prob):
	x <~ uniform(0,1)
	return (1/lambda) * log( real2prob( 1 + ( real2prob(x/(1-x)) ** (1/kappa) ) ) )

#exponential power distribution
def exponentialPower(lambda prob, kappa prob):
	x <~ uniform(0,1)
	return real2prob((log(real2prob(1-log(real2prob(1-x))))) / lambda)**(1/kappa)


